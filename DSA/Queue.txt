1 SLIDING WINDOW MAXIMUM
Given an array and a window of size k. return max element in window from left to right.
Input: nums = [1,3,-1,-3,5,3,6,7], k = 3
Output: [3,3,5,5,6,7]
Explanation: 
Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7

Approach 3(Best) :  Using Dobly Ended Queue. Maintain it in descending order. Keep poping top till it is Out Of Bounds. 

vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        
        int n = nums.size();
        
        deque<int>dq;
        vector<int>ans;
        
        for(int i=0;i<k;i++){
	//keep poping the elements that were before the curr in the array and has value less than curr. 
	   They will go OOB first & can never be largest as they are less than curr so they are of no use.
            while(!dq.empty()&&nums[i]>=nums[dq.back()])
                dq.pop_back();
            dq.push_back(i);
        }
        
        for(int i=k; i<n; i++){
            ans.push_back(nums[dq.front()]);
		//Keep poping the elements in DESC order from front till they are OUT OF BOUNDS.
            while(!dq.empty() && dq.front()<=i-k)
                dq.pop_front();
	    //keep poping the elements that were before the curr in the array and has value less than curr. 
	   They will go OOB first & can never be largest as they are less than curr so they are of no use.
            while(!dq.empty() && nums[i]>=nums[dq.back()])
                dq.pop_back();
            dq.push_back(i);
        }
        ans.push_back(nums[dq.front()]);
        return ans;
    }
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

