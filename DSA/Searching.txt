Find square root using binary search.
take low = 1 and high = n, perform binary search with floor storing as answer.

long long int floorSqrt(long long int x) 
{
    // Your code goes here  
    long long int ans = 1 , l = 1 , r = x , mid;
    
    while(l <= r){
        mid = l +(r-l)/2;
        if(mid*mid == x) return mid;
        if(mid*mid < x){
            ans = mid;
            l = mid + 1;
        }
        else r = mid - 1;
    }
 return ans;
}
_______________________________________________________________________________________________________________________
Search an element in sorted rotated array

int bin(vector<int> arr , int low , int high , int K){
    while(low <= high){
        int mid = low + (high-low)/2;
        if(arr[mid] == K) return mid;
        else if(arr[mid] < K) low = mid+1;
        else high = mid -1;
    }
    return -1;
}

int Search(vector<int> arr, int K) {
    int n = arr.size();
    if(arr[0] < arr[n-1]) return bin(arr,0,n-1,K);
    
    int pivot = -1 , low = 0 , high = n-1 , mid;
    while(pivot == -1){
        mid = low + (high - low)/2;
        if(arr[mid] > arr[mid+1]) pivot = mid;
        else if(arr[mid] < arr[0]) high = mid-1;
        else low = mid + 1;
    }
    return bin(arr,0,pivot,K) > -1? bin(arr,0,pivot,K) : bin(arr,pivot+1,n-1,K);
}
________________________________________________________________________________________________________________________
Find Peak Element i.e a[i] > a[i+1] and a[i] > a[i-1] if exist
Following corner cases give better idea about the problem. 
	If input array is sorted in strictly increasing order, the last element is always a peak element. For example, 50 is peak element in {10, 20, 30, 40, 50}.
	If the input array is sorted in strictly decreasing order, the first element is always a peak element. 100 is the peak element in {100, 80, 60, 50, 20}.
	If all elements of input array are same, every element is a peak element.
It is clear from the above examples that there is always a peak element in the input array.

int peakElement(int arr[], int n)
    {
       if(n==1) return  0;
       if(arr[0] >= arr[1]) return 0;
       if(arr[n-1] >= arr[n-2]) return n-1;
       
       int low = 1 , high = n-2 , mid;
       
       while(low <= high){
           mid = low + (high - low)/2;
           if(arr[mid] > arr[mid+1] and arr[mid] > arr[mid-1]) return mid;
           else if(arr[mid] < arr[mid+1]) low = mid+1;
           else high = mid-1;
       }  
       return mid;
    }
________________________________________________________________________________________________________________________
