void inorder( Node* root){                                preorder                                          postorder
	if(!root){
		inorder(root->left);                        cout<<root->val<<endl;                    inorder(root->left);
  	        cout<<root->val<<endl;                inorder(root->left);                            inorder(root->right); 
	       inorder(root->right);                      inorder(root->right);                         cout<<root->val<<endl; 
	}
}
________________________________________________________________________________________________
Left View of Tree
vector<int> leftView(Node *root)
{
     vector<int>ans;
    if(!root) return ans;
   queue<Node*> q;
   q.push(root);
   q.push(NULL);
   ans.push_back(root->data);								// skip in right view
   
   while(!q.empty()){
       Node *curr = q.front();
       q.pop();
       
       if(curr == NULL and q.empty()) break;
       if(curr == NULL and !q.empty()) {
           q.push(NULL);
           ans.push_back(q.front()->data); 						// skip in right view
           continue;
       }													Right view
        													if(q.front() == NULL)
               										 	        ans.push_back(curr->data);
       
       if(curr->left) q.push(curr->left);
       if(curr->right) q.push(curr->right);
       
   }
   _________________________________________________________________________________________________________________
Bottom View of tree
 vector <int> bottomView(Node *root) {                                vector <int> topView
        vector<int>ans;
        if(!root)
        return ans;
        map<int,int>mp;
        queue<pair<Node*,int>>q;
        q.push({root,0}); //push node with its vertical level    
        while(!q.empty()){
          pair<Node*,int>curr = q.front();
          q.pop();										//extra condition for top view        if(mp.find(curr.second) == mp.end())
          mp[curr.second]=curr.first->data;					
          if(curr.first->left!=NULL)
          q.push({curr.first->left,curr.second-1}); 
          if(curr.first->right!=NULL)
          q.push({curr.first->right,curr.second+1});
        }
        for(auto x : mp)
        ans.push_back(x.second);
        return ans;
    }
   return ans;
}
_____________________________________________________________________________________
Given a Binary Tree A containing N nodes.
You need to find the path from Root to a given node B.

bool inorder(TreeNode* root , int dest , vector<int>&ans){
     if(!root) return false;
     
     ans.push_back(root->val);
     if(root->val == dest) return true;
     
     bool l = inorder(root->left,dest,ans);
     bool r = inorder(root->right,dest,ans);
     
     if(!l and !r){ ans.pop_back(); return false;}
     return true; 
 }
vector<int> Solution::solve(TreeNode* A, int B) {  
    vector<int>ans;
    inorder(A,B,ans);
    return ans;
   }
________________________________________________________________________________________________
Spiral traversal of tree
vector<int> findSpiral(Node *root)
{
    //Your code here
    stack<Node*> l , r;
    r.push(root);
    
    vector<int>ans;
    if(!root) return ans;
    while(!r.empty() or !l.empty()){
        while(!r.empty()){
            Node* curr = r.top();
            r.pop();
            ans.push_back(curr->data);
            if(curr->right) l.push(curr->right);
            if(curr->left) l.push(curr->left);
        }
        while(!l.empty()){
            Node* curr = l.top();
            l.pop();
            ans.push_back(curr->data);
            if(curr->left) r.push(curr->left);
            if(curr->right) r.push(curr->right);
        }
    }
    
    return ans;
}
______________________________________________________________________________________________________________________
Height of tree
int maxDepth(TreeNode* root) {
        if(root==NULL)
            return 0;
        int lh = maxDepth(root->left);
        int rh = maxDepth(root->right);  
        return 1+max(lh,rh);
    }
______________________________________________________________________________________________________________________
Diameter of tree
 int height(TreeNode* root , int &ans){
        if(!root) return 0;
        
        int lh = height(root->left,ans);
        int rh = height(root->right,ans);
        
        ans = max(ans , 1+lh+rh);        // only this modification in height function
        return 1+max(lh,rh);
    }
    int diameterOfBinaryTree(TreeNode* root) {
        int ans = 0;
        height(root,ans);
        return ans;
    }
________________________________________________________________________________________________________________________
LCA if both node exist
TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(!root) return NULL;
        
        if(root == q or root == p) return root;
        
        TreeNode* l = lowestCommonAncestor(root->left , p , q);
        TreeNode* r = lowestCommonAncestor(root->right , p , q);
        if(l and r) return root;          			// if l and r are not null then root is the LCA
        if(l) return l;
        return r;
    }
_____________________________________________________________________________________________________________________
Check two tree are same or note
bool isSameTree(TreeNode* p, TreeNode* q) {
        if(!p and !q) return true;
        if(!p or !q) return false;
        
        return (p->val == q->val) and isSameTree(p->left,q->left) and isSameTree(p->right , q->right);
    }
________________________________________________________________________________________________________________________
Convert a tree in mirror form
Node* solve(Node* root){
        if(!root) return NULL;
        
        Node* temp = root->left;
        root->left = solve(root->right);
        root->right = solve(temp);
    }
void mirror(Node* node) {
        solve(node);
    }
________________________________________________________________________________________________________________________
Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).
 bool solve(TreeNode*l , TreeNode* r){
        if(!l and !r) return true;
        if(!l or !r) return false;
        
        return((l->val == r->val) and solve(l->left,r->right) and solve(l->right,r->left));
    }
    bool isSymmetric(TreeNode* root) {
        if(!root) return true;
        return solve(root->left,root->right);
    }
________________________________________________________________________________________________________________________
Maximum path sum from any node
For each node there can be four ways that the max path goes through the node: 
1. Node only 
2. Max path through Left Child + Node 
3. Max path through Right Child + Node 
4. Max path through Left Child + Node + Max path through Right Child

int solve(Node* root , int &ans){
        if(!root) return 0;
        int l = solve(root->left , ans);
        int r = solve(root->right , ans);
        ans = max(ans , root->data+l+r); //this gives max when l and r both give +ve value
        ans = max(ans , root->data+l); //this gives max when l is +ve and r give -ve value
        ans = max(ans , root->data+r); //this gives max when l is -ve and r give +ve value
        ans = max(ans , root->data);    //this gives max when l and r both give -ve value
        return max((root->data + max(l,r)) , root->data);
    }
    int findMaxSum(Node* root)
    {
        int ans = INT_MIN;
        solve(root , ans);
        return ans;
    }
_______________________________________________________________________________________________________________________
Maximum Width of binary tree  i.e intermediate NULL will also be considered if they are between two non Null value in a level.

  see to revise leveling each node concept :  https://youtu.be/ZbybYvcVLks?t=702

 int widthOfBinaryTree(TreeNode* root) {
        
        queue<pair<TreeNode* , long>>q;
        q.push({root , 1});
        q.push({NULL , -1});
        long ans = 0;
        long min_level = 1;
        
        while(!q.empty()){
            TreeNode* curr = q.front().first;
            long level = q.front().second;
            q.pop();
            if(curr == NULL){
                if(q.empty()) break;   
                q.push({NULL , -1});
                min_level = q.front().second;
                continue;
            }
            ans = max(ans , level-min_level+1);
            level -= min_level;
            if(curr->left) q.push({curr->left , 2*level+1});
            if(curr->right) q.push({curr->right , 2*level+2});
        }   
        return ans;
    }
_________________________________________________________________________________________________________________________
Flatenning tree into linked list 
Given the root of a binary tree, flatten the tree into a "linked list":
The "linked list" should use the same TreeNode class where the right child pointer points to the next node in the list and the left child pointer is always null.
The "linked list" should be in the same order as a pre-order traversal of the binary tree.

TreeNode* prev = NULL;
    void flatten(TreeNode* root) {
        if(!root) return;
        
        flatten(root->right);   				// The intution is to perform a reverse preorder traversal and storing the last visited node in prev.
        flatten(root->left);					// It works like go to right, connect it to left, then go to left and finally connect it to root;
        root->right = prev;
        root->left = NULL;
        prev = root;
    }
______________________________________________________________________________________________________________________
Construct tree from inorder and preorder traversal

TreeNode* makeTree(vector<int>& preorder, vector<int>& inorder,int l , int r , int &preI){
        if(r<l) return NULL;
        if(preI >=preorder.size()) return NULL;
        
        TreeNode* root = new TreeNode(preorder[preI++]);
        int inorderI = 0;
        for(int i = l ; i<=r ; i++) if(inorder[i] == root->val) inorderI = i; // find  out index of current in inorder array
        
        root->left = makeTree(preorder,inorder,l,inorderI-1,preI); // left side of index will be left subtree
        root->right = makeTree(preorder,inorder,inorderI+1,r,preI);
        
        return root;
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int preSize = preorder.size();
        int inSize = inorder.size();
        
        if(!preSize or !inSize) return NULL;
        int preI = 0;
        return makeTree(preorder,inorder,0,preSize-1,preI);
    }
___________________________________________________________________________________________________________________
Construct tree from inorder and posorder

TreeNode* makeTree(vector<int>& inorder, vector<int>& postorder,int l, int r, int &posI){
        if(r<l) return NULL;
        TreeNode* root = new TreeNode(postorder[posI--]);
        
        int inI = 0 ;
        for(int i = l ; i<=r ; i++) {  if(root->val == inorder[i]) { inI = i; break; }  }
        
        root->right = makeTree(inorder,postorder,inI+1,r,posI);
        root->left = makeTree(inorder,postorder,l,inI-1,posI);
        return root;
    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        int n = inorder.size();
        int pos = n-1; // root is last element so traversing backward
        return makeTree(inorder,postorder,0,n-1,pos);
        
    }
____________________________________________________________________________________________________________________________
	
