1 Set Matrix Zeroes
Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's.

class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
        vector<pair<int,int>> pos;
        int n=matrix.size();
        int m=matrix[0].size();
        
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(matrix[i][j] == 0)
                    pos.push_back({i,j});
            }
        }
        
        if(pos.size()==(n*m))
            return;
        
       for(int i=0;i<pos.size();i++){
           pair<int,int> curr=pos[i];
           for(int j=0;j<m;j++)
               matrix[curr.first][j]=0;
               
           for(int j=0;j<n;j++) 
               matrix[j][curr.second]=0;
 
    }
};




2 Pascals Triangle
1
1 1
1 2 1
1 3 3 1	
1 4 6 4 1
class Solution {
public:
    vector<vector<int>> generate(int numRows) {
        vector<vector<int>> ans;
         vector<int>temp={1};
        ans.push_back(temp);
        vector<int>prev=temp;
        
        for(int i=2;i<=numRows;i++){
            temp.clear();
           temp.push_back(1);
            for(int j=1;j<prev.size();j++){
                  temp.push_back(prev[j]+prev[j-1]);
            }
            temp.push_back(1);
            prev=temp;
            ans.push_back(temp);
        }
        return ans;
    }
};

3 Kth smallest element using quick select i.e lomuto partioning (It's average case is On , worst is Onlogn but in general average is considered)
int kthSmallest(vector<int>arr, int l, int r, int k) {
        //code here
       if(l>r)
       return -1;
       
       int random = l + (rand() % (r-l+1));
       
       swap(arr[random],arr[r]);
       
       int j=l-1;
       
//Lomuto partioning block
       for(int i=l;i<r;i++){
           if(arr[i]<arr[r])
           {
               j++;
               swap(arr[i],arr[j]);
           }
       }
       j++;
       swap(arr[r],arr[j]);
       
       if(j==k)
       return arr[j];
       
       if(j<k)
       return kthSmallest(arr,j+1,r,k);
       else
       return kthSmallest(arr,l,j-1,k);
    }
    int findKthLargest(vector<int>& nums, int k) {
	//HELPER FUNCTION
        return kthSmallest(nums,0,nums.size()-1,nums.size()-k);
    }

---------------------------------------------------------------------------------------------------------------------------------------
Next permutation
intution           find from right breakPoint i.e arr[i] <arr[i+1]
			find from right arr[i] >arr[brakPoint]
			swap arr[i] arr[breakPoint]
			reverse from breakpoint+1 to n-1;
bcoz upto breakpoint it was foloowing a descending order and after swapping and reversing descending will convert into ascending i.e least order.

void nextPermutation(vector<int>& nums) {
        
        int breakPoint = -1;
        int n=nums.size();
        int i=n-2;
        while(i>=0 and nums[i]>=nums[i+1])
            i--;
        if(i<0){
            reverse(nums.begin(),nums.end());
            return;
        }
        
        breakPoint =i;
        i=n-1;
        while(i>=0 and nums[i] <= nums[breakPoint])
            i--;
        
        swap(nums[i] , nums[breakPoint]);
        
        for( int k=n-1 ,i=breakPoint+1;i<k;i++,k--)
            swap(nums[i],nums[k]);  
    }

-------------------------------------------------------------------------------------------------------------------------------------------------------------

MaximumSubarray (Kadence Algo)

int maxSubArray(vector<int>& nums) {
        int ans = nums[0];
        int temp = nums[0];
        int n=nums.size();
        for(int i=1;i<n;i++){
            temp = max(temp+nums[i],nums[i]);
            ans=max(temp,ans);
        }
        return ans;
    }
--------------------------------------------------------------------------------------------------------------------------------------------
Sort array of 0 1 and 2 Dutch National flag Algo 
void sortColors(vector<int>& nums) {
        int n=nums.size();
        int low=0,mid=0,high=n-1;
        
        while(mid<=high){
            if(nums[mid]==0){
                swap(nums[low],nums[mid]); mid++;low++;
            }
            else if(nums[mid]==1){
                mid++;
                }
            else{
               swap(nums[high],nums[mid]); high--;
            }
        }
    }
---------------------------------------------------------------------------------------------------------------------------------------------------------------
Buy and sell stock only once  
int maxProfit(vector<int>& arr) {
        int n = arr.size();
        int temp=0,ans=0;
        
        for(int i=0;i<n-1;i++){
            temp = temp + arr[i+1]-arr[i] > 0 ? temp + arr[i+1]-arr[i] : 0; // if temp goes below 0, make it 0
            ans = max(ans,temp);
        }
        
        return ans;
    }
______________________________________________________________________________________________________________

Rotate Matrix 90 degrees
void rotate(vector<vector<int>>& matrix) {
        int n=matrix.size();
        
        //Make transpose of the matrix
        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++)
                swap(matrix[i][j] , matrix[j][i]);
        }
        //to rotate clockwise, exchange columns
        for(int i=0,j=n-1;i<j;i++,j--){
            for(int k=0;k<n;k++)
                swap(matrix[k][i],matrix[k][j]);
        }
        /* to rotate anti-clockwise, exchange rows
            for(int i=0,j=n-1;i<j;i++,j--){
            for(int k=0;k<n;k++)
                swap(matrix[i][k],matrix[j][k]);
        */   
    }
    

TO ROTATE A MATRIX BY 180
>TRANSPOSE
>EXCHANGE COLUMNS
>TRANSPOSE
>EXCHANGE COLUMNS
_____________________________________________________________________________________________________________
Merge Overlapping Subintervals (Sort array in inc  order of start time)

static bool myComp(vector<int>a,vector<int>b){
        return a[0]<b[0];
    }
    vector<vector<int>> merge(vector<vector<int>>& arr) {
        
        vector<vector<int>>ans;
        sort(arr.begin(),arr.end(),myComp);
        
        int n= arr.size();
        
        for(int i=0;i<n;i++){
            int start = arr[i][0];
            int end = arr[i][1];
            while(i+1<n and end>=arr[i+1][0]){
                i++;
                end = max(arr[i][1],end);
            }
            ans.push_back({start,end});
        }
        return ans;
    }
_____________________________________________________________________________________________________________________
Merge tow sorted arrays without using extra space
Time complexity O(mn) without using extraa space
int i=0,j=0;
	while(i<n){
	    if(arr1[i]<=arr2[0]) i++;
	    else{
	        swap(arr1[i],arr2[0]);
	        i++;
	        for(j=0;j<m;j++)
	        if(arr2[j]>arr2[j+1])
	        swap(arr2[j],arr2[j+1]);
	    }
	}
with O(m+n)log(m+n)
GAP method or shell sort
take gap=ceil (m+n)/2 and gap/=2 after each iteration;
in each gap iteration traverse i from 0 to n+m-gap;
if(arr[i] > arr[i+gap]) swap them;

__________________________________________________________________________________________________________________

Find duplicate in n+1 array
 int findDuplicate(vector<int>& nums) {
        int n=nums.size();
        for(int i=0;i<n;){
            if(nums[i] == i)
                i++;
            else{
                if(nums[nums[i]] == nums[i])
                    return nums[i];
                else swap(nums[nums[i]],nums[i]);
            }
        }
        
        return 0;
    }
_____________________________________________________________________________________________________________________
Repeat and missing number
You are given a read only array of n integers from 1 to n.
Each integer appears exactly once except A which appears twice and B which is missing.
Return A and B.

vector<int> Solution::repeatedNumber( vector<int> &nums) {
    
    vector<int>ans;
    int n=nums.size();
    for(int i=0;i<n;){
        if(nums[i]-1 == i)
        i++;
        else{
            if(nums[i] == nums[nums[i] - 1]) //leave the extra and place other at their correct spot.
            i++;
            else swap(nums[i] , nums[nums[i] - 1]);
        }
    }
    for(int i=0;i<n;i++){
        if(nums[i]-1 !=i)
        {
            ans.push_back(nums[i]);
            ans.push_back(i+1);
        }
    }  
    return ans;
}
________________________________________________________________________________________________________________________
Search A 2D matrix with following properties
	Integers in each row are sorted from left to right.
	The first integer of each row is greater than the last integer of the previous row.

bool searchMatrix(vector<vector<int>>& nums, int target) {
        int n= nums.size();
        int m = nums[0].size();
        
        int i=0,j=0;
//traverse until the last element of each row is smaller than target
        while(i<n and nums[i][m-1] < target) i++;

        if(i==n)
            return  false;
        
        if(nums[i][m-1] == target)
            return true;
        
        for(int j=0;j<m;j++)
            if(nums[i][j] == target)
                return true;
        return false;   
    }
______________________________________________________________________________________________________________________________
Pow x^n effective

double myPow(double x, int n) {
        double ans=1,sign=0;
        
        if(n<0){n=abs(n);sign =1;} 
        
        while(n){
            if(n&1)
                ans=ans*x;
            x=x*x;
            n/=2;
        }
        
        if(sign)  ans = 1/ans;
        
        return ans;
    }
______________________________________________________________________________________________________________________________
Majority Elements more than floor(n/2). array is unsorted.
>>Moore Voting Algorithm
the majority element witll make cnt zero at last and hence will be stored in el.
int majorityElement(vector<int>& nums) {
        int n = nums.size();
        int cnt=0,el=0,i=0;
        while(i<n){
            if(cnt == 0)
                el=nums[i];
            if(nums[i] == el)
                cnt++;
            else
                cnt--;
            i++;
        }
        return el; 
    }
____________________________________________________________________________________________________________________
Majority element n/3. Modified moore voting algo

vector<int> majorityElement(vector<int>& nums) {
        
        int num1=-1,num2=-1,c1=0,c2=0;
        vector<int>ans;
        
        for(int i=0;i<nums.size();i++){
            if(nums[i]==num1)
                c1++;
            else if(nums[i]==num2)
                c2++;
            else if(c1==0)
            {
                num1=nums[i];
                c1=1;
            }
            else if(c2==0)
            {
                num2=nums[i];
                c2=1;
            }
            else{
                c1--;
                c2--;
            }
        }
        
        c1=0;c2=0;
        for(int i=0;i<nums.size();i++){
            if(num1==nums[i])
                c1++;
            if(num2==nums[i])   
                c2++;
        }
        
        if(c1>nums.size()/3)
            ans.push_back(num1);
        
        if(c2>nums.size()/3&&num1!=num2)
            ans.push_back(num2);
       
        return ans;
    }
__________________________________________________________________________________________________________________________
No. of ways to reach from top left to bottom right (Memoization)

  int dp[102][102]={0};
    int solve(int m,int n, int i, int j){
        if(i==m and j==n)
            return dp[i][j]=1;
        if( i>m or j>n)
            return  dp[i][j] =0;
        if(dp[i][j]<=0)
        dp[i][j] = solve(m,n,i+1,j) + solve(m,n,i,j+1);
        return dp[i][j];
        
    }
    int uniquePaths(int m, int n) {
       return solve( m, n , 1 ,1);
         
    }
__________________________________________________________________________________________________________________________
2 Sum 
sort the array and use two pointer  nlogn & O1
use hashmap On & On

4 Sum
sort array
outer loop from 0 to n-3
inner loop from outer + 1 to n-2
2 sum with repitition check inside
__________________________________________________________________________________________________________________________

Longest Consecutive Subsequence
Input: nums = [100,4,200,1,3,2]
Output: 4
Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.

 int longestConsecutive(vector<int>& nums) {
        
        int n = nums.size();
        map<int,int> freq,vis;
        for(int i=0;i<n;i++){
            freq[nums[i]] = 1;
        }
            int ans= 0;
        
        for(int i=0;i<n;i++){
            
            if(vis[nums[i]] == 1)
                continue;
            
            int temp = 1 , num = nums[i];
            
            while(freq[num-1] > 0){
                vis[--num] = 1;
                temp++;
            }
            num = nums[i];
            while(freq[num+1] > 0){
                vis[++num] = 1;
                temp++;
            }
            ans = max(ans,temp);
            vis[nums[i]] = 1;
        }   
        return ans;
    }
__________________________________________________________________________________________________________________________
Longest Subarray with zero sum

 int maxLen(vector<int>&A, int n)
    {   
        vector<int>pre(n);
        map<int,int>maxI;
        
        pre[0] = 0;

        for(int i=0;i<n;i++){
            pre[i] = pre[i-1] + A[i];
            maxI[pre[i]] = i;
        }
        int ans = 0;
        for(int i=0 ; i<n;i++){
           ans = max(ans,maxI[pre[i]] - i ); 
           if(pre[i] == 0)
           ans = max(ans,i+1);
        }
        
        return ans;
    }
_______________________________________________________________________________________________________________________
Input:
N = 4
A[] = {8,3,1,2}
Output: 29
Explanation: Above the configuration
possible by rotating elements are
3 1 2 8 here sum is 3*0+1*1+2*2+8*3 = 29
1 2 8 3 here sum is 1*0+2*1+8*2+3*3 = 27
2 8 3 1 here sum is 2*0+8*1+3*2+1*3 = 17
8 3 1 2 here sum is 8*0+3*1+1*2+2*3 = 11
Here the max sum is 29 

logic- after every rotation the element ar index 0 will go at index N-1 and each element will reduce it's contribution by its value
so if at k-1th iteration the index*value sum is indSum, then contribution reduced by 1 to n-1 elements is sum of element - element at 0
and contribution added is element at 0* N-1. Hence the change will be = indSum - sum + a[k] + (N-1)*a[k] = indSum - sum + N*a[k] where k goes from 0 to n-1

int max_sum(int A[],int N)
{
    int ans = 0 , sum = 0 , indSum = 0;
    
    for(int i = 0 ; i < N ; i++) {   sum += A[i]; indSum += A[i]*i;   }
    
    ans = indSum;
    
    for(int i=0 ; i<N ; i++){
        indSum = indSum - sum + (N*A[i]);
        ans = max(ans,indSum);
    }
    
    return ans;
}
_______________________________________________________________________________________________________________________
Given an array arr[] of size N, find the smallest positive number missing from the array.
N = 5
arr[] = {0,-10,1,3,-20}
Output: 2
//Use cycle sort and look for repeated elements i.e arr[i] != arr[arr[i] - 1] 
 int findMissing(int arr[], int n) { 
        int i = 0;
        while( i<n ){
         if(arr[i] > 0 and arr[i] <= n and arr[i] != arr[arr[i] - 1] and arr[i] - 1 != i)
                swap(arr[i] , arr[arr[i] - 1]);
                else i++;
        }
        for(int i = 0 ; i < n ; i++)
        if(i+1 != arr[i]) return i+1;
        
        return n+1;
    }
________________________________________________________________________________________________________________________
Trapping Rainwater Problem
// On space and 2 traversal
int trap(vector<int>& height) {
        int n = height.size();
        vector<int>left(n,0);
        left[0] = height[0]; int lmax =height[0];
        for(int i = 1; i < n  ; i++){
            lmax = max(lmax , height[i]);
            left[i] = lmax;
        }
        int ans = 0; int rmax = height[n-1];
        for(int i = n-2; i>=0 ; i--){
            rmax = max(rmax , height[i]);
            ans += min(left[i] , rmax) - height[i];
        }
        return ans;
    }

//constant space and one traversal
//whichever between l and r is small, water will be trapped on its boundaries
 int trap(vector<int>& arr) {
        int n = arr.size();
        int l = 0 , r = n-1 , lmax= 0 ,rmax = 0,ans = 0;
        
        while(l<r){
            if(arr[l] <= arr[r]){
                lmax = max(lmax,arr[l]);
                ans += (lmax - arr[l++]);
            }
            else{
                rmax = max(rmax,arr[r]);
                ans += (rmax - arr[r--]);
            }
        }
        return ans;
    }
________________________________________________________________________________________________________________________
